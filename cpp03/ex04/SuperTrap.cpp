#include "SuperTrap.hpp"

/* ************************************************************************** */
/* ---------------------------- STATIC VARIABLE ----------------------------- */
/* ************************************************************************** */

/* static variable code */

/* ************************************************************************** */
/* ------------------------------ CONSTRUCTOR ------------------------------- */
/* ************************************************************************** */

SuperTrap::SuperTrap()
{
	name = "NEW";
	hp = 100;
	maxHp = 100;
	ep = 120;
	maxEp = 120;
	lv = 1;
	MAD = 60;
	RAD = 20;
	arm = 5;
	type = "SUPR-TP";
	std::cout << "SUPR-TP, " << name << " player  created\n";
}

SuperTrap::SuperTrap(std::string _name)
:ClapTrap(_name), FragTrap(_name), NinjaTrap(_name)
{
	name = _name;
	hp = 100;
	maxHp = 100;
	ep = 120;
	maxEp = 120;
	lv = 1;
	MAD = 60;
	RAD = 20;
	arm = 5;
	type = "SUPR-TP";
	std::cout << "SUPR-TP, player " << name << " created\n";
}

SuperTrap::SuperTrap(const SuperTrap& copy)
: ClapTrap(copy), FragTrap(copy), NinjaTrap(copy)
{
	std::cout << "SUPR-TP, player " << name << " created by copy\n";
}

/* ************************************************************************** */
/* ------------------------------- DESTRUCTOR ------------------------------- */
/* ************************************************************************** */

SuperTrap::~SuperTrap()
{
	std::cout << "SUPR-TP, Exit " << name << "'s default info!" << std::endl;
}

/* ************************************************************************** */
/* -------------------------------- OVERLOAD -------------------------------- */
/* ************************************************************************** */

SuperTrap& SuperTrap::operator=(const SuperTrap& obj)
{
	if (this == &obj)
		return (*this);
	this->ClapTrap::operator=(obj);
	std::cout << "SUPR-TP, player " << name << " allocated\n";
	return (*this);
}

/* ************************************************************************** */
/* --------------------------------- GETTER --------------------------------- */
/* ************************************************************************** */



/* ************************************************************************** */
/* --------------------------------- SETTER --------------------------------- */
/* ************************************************************************** */



/* ************************************************************************** */
/* ------------------------------- EXCEPTION -------------------------------- */
/* ************************************************************************** */

/* ************************************************************************** */
/* ---------------------------- MEMBER FUNCTION ----------------------------- */
/* ************************************************************************** */

unsigned int SuperTrap::rangedAttack(std::string const &target)
{
	return (FragTrap::rangedAttack(target));
}

unsigned int SuperTrap::meleeAttack(std::string const &target)
{
	return (NinjaTrap::meleeAttack(target));
}
