#include "../ex02/FragTrap.hpp"

/* ************************************************************************** */
/* ------------------------------ CONSTRUCTOR ------------------------------- */
/* ************************************************************************** */

FragTrap::FragTrap()
{
	name = "NEW";
	hp = 100;
	maxHp = 100;
	ep = 100;
	maxEp = 100;
	lv = 1;
	MAD = 30;
	RAD = 20;
	arm = 5;
	type = "FR4G-TP";
	std::cout << type << ", NEW player created\n";
}

FragTrap::FragTrap(std::string _name)
: ClapTrap(_name)
{

	name = _name;
	hp = 100;
	maxHp = 100;
	ep = 100;
	maxEp = 100;
	lv = 1;
	MAD = 30;
	RAD = 20;
	arm = 5;
	type = "FR4G-TP";
	std::cout << type << ", player " << name << " created\n";
}

FragTrap::FragTrap(const FragTrap& copy)
: ClapTrap(copy)
{
	std::cout << type << ", player " << name << " created by copy\n";
}

/* ************************************************************************** */
/* ------------------------------- DESTRUCTOR ------------------------------- */
/* ************************************************************************** */

FragTrap::~FragTrap()
{
	std::cout << type << ", player " << name << " deleted\n";
}

/* ************************************************************************** */
/* -------------------------------- OVERLOAD -------------------------------- */
/* ************************************************************************** */

FragTrap& FragTrap::operator=(const FragTrap& obj)
{
	if (this == &obj)
		return (*this);
	this->ClapTrap::operator=(obj);
	std::cout << type << ", player " << name << " allocated\n";
	return (*this);
}

/* ************************************************************************** */
/* --------------------------------- GETTER --------------------------------- */
/* ************************************************************************** */



/* ************************************************************************** */
/* --------------------------------- SETTER --------------------------------- */
/* ************************************************************************** */



/* ************************************************************************** */
/* ------------------------------- EXCEPTION -------------------------------- */
/* ************************************************************************** */

/* exception code */

/* ************************************************************************** */
/* ---------------------------- MEMBER FUNCTION ----------------------------- */
/* ************************************************************************** */

unsigned int FragTrap::vaulthunter_dot_exe(std::string const & target)
{
	std::string	attack[5] = {"pinch", "punch", "slap", "kick", "shot"};
	std::random_device rd;
	std::mt19937 gen(rd());
	std::uniform_int_distribution<int> dis(0, 4);
	int	damage[5] = {3, 10, 15, 20, 50};
	int	i;

	if (ep < 25)
	{
		std::cout << "Not enough energy.\n";
		return (0);
	}
	ep -= 25;
	i = dis(gen);
	std::cout << name << " funny attacks " << target << " with " << attack[i] \
			 << " causing " << damage[i] << " points of damage!\n";
	return (damage[i]);
}
