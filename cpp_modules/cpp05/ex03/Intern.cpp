#include "Intern.hpp"

/* ************************************************************************** */
/* ------------------------------ CONSTRUCTOR ------------------------------- */
/* ************************************************************************** */

Intern::Intern() {}

Intern::Intern(const Intern& copy)
{
	(void)copy;
}

/* ************************************************************************** */
/* ------------------------------- DESTRUCTOR ------------------------------- */
/* ************************************************************************** */

Intern::~Intern()
{
}

/* ************************************************************************** */
/* -------------------------------- OVERLOAD -------------------------------- */
/* ************************************************************************** */

Intern& Intern::operator=(const Intern& obj)
{
	if (this == &obj)
		return (*this);
	return (*this);
}

/* ************************************************************************** */
/* --------------------------------- GETTER --------------------------------- */
/* ************************************************************************** */

/* getter code */

/* ************************************************************************** */
/* --------------------------------- SETTER --------------------------------- */
/* ************************************************************************** */

/* setter code */

/* ************************************************************************** */
/* ------------------------------- EXCEPTION -------------------------------- */
/* ************************************************************************** */

/* exception code */

/* ************************************************************************** */
/* ---------------------------- MEMBER FUNCTION ----------------------------- */
/* ************************************************************************** */

Form*   Intern::makeForm(std::string form, std::string target)
{
	std::string targets[3] = {"shrubbery creation", "robotomy request", "presidential pardon"};
	Form *forms[3];
	Form *obj = 0;

	forms[0] = new ShrubberryCreationForm(target);
	forms[1] = new RobotomyRequestForm(target);
	forms[2] = new PresidentialPardonForm(target);
	for (int i = 0; i < 3; i++)
	{
		if (form == targets[i])
		{
			obj = forms[i];
			std::cout << "Intern creates " << form << '\n';
			continue ;
		}
		delete forms[i];
	}
	if (!obj)
		std::cout << "Not a valid Intern : " << form << '\n';
	return (obj);
}