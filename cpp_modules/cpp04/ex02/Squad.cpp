#include "Squad.hpp"

/* ************************************************************************** */
/* ---------------------------- STATIC VARIABLE ----------------------------- */
/* ************************************************************************** */

/* static variable code */

/* ************************************************************************** */
/* ------------------------------ CONSTRUCTOR ------------------------------- */
/* ************************************************************************** */

Squad::Squad()
:n(0), units(0)
{
}

Squad::Squad(const Squad& copy)
:n(0), units(0)
{
	for (int i = 0; i < copy.n; i++)
		push(copy.units[i]->clone());
}

/* ************************************************************************** */
/* ------------------------------- DESTRUCTOR ------------------------------- */
/* ************************************************************************** */

Squad::~Squad()
{
	if (units)
	{
		for (int i = 0; i < n; i++)
			delete units[i];
		delete[] units;
	}
}

/* ************************************************************************** */
/* -------------------------------- OVERLOAD -------------------------------- */
/* ************************************************************************** */

Squad& Squad::operator=(const Squad& obj)
{
	if (this == &obj)
		return (*this);
	if (units)
	{
		for (int i = 0; i < n; i++)
			delete units[i];
		delete[] units;
	}
	n = 0;
	for (int i = 0; i < obj.getCount(); i++)
		push(obj.getUnit(i)->clone());
	return (*this);
}

/* ************************************************************************** */
/* --------------------------------- GETTER --------------------------------- */
/* ************************************************************************** */

int Squad::getCount() const
{
	return (n);
}

ISpaceMarine* Squad::getUnit(int _n) const
{
	if (n <= _n || _n < 0 || n == 0)
		return (0);
	return (units[_n]);
}

int Squad::push(ISpaceMarine* _unit)
{
	if (!_unit)
		return (n);
	if (!units)
	{
		units = new ISpaceMarine*[1];
		units[0] = _unit;
		n = 1;
		return (n);
	}
	for (int i = 0; i < n; i++)
	{
		if (units[i] == _unit)
			return (n);
	}
	ISpaceMarine** temp = new ISpaceMarine*[n + 1];
	for (int i = 0; i < n; i++)
		temp[i] = units[i];
	delete[] units;
	units = temp;
	units[n] = _unit;
	n++;
	return (n);
}
/* ************************************************************************** */
/* --------------------------------- SETTER --------------------------------- */
/* ************************************************************************** */

/* setter code */

/* ************************************************************************** */
/* ------------------------------- EXCEPTION -------------------------------- */
/* ************************************************************************** */

/* exception code */

/* ************************************************************************** */
/* ---------------------------- MEMBER FUNCTION ----------------------------- */
/* ************************************************************************** */

