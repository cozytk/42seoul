#include "Character.hpp"

/* ************************************************************************** */
/* ------------------------------ CONSTRUCTOR ------------------------------- */
/* ************************************************************************** */

Character::Character()
: name(0), _idx(0)
{
	for (int i = 0; i < 4; i++)
		ivt[i] = 0;
}

Character::Character(std::string _name)
: name(_name), _idx(0)
{
	for (int i = 0; i < 4; i++)
		ivt[i] = 0;
}

Character::Character(const Character& copy)
{
	name = copy.name;
	_idx = copy._idx;
	for (int i = 0; i < 4; i++)
	{
		if (copy.ivt[i] != 0)
			ivt[i] = copy.ivt[i]->clone();
		else
			ivt[i] = 0;
	}
}

/* ************************************************************************** */
/* ------------------------------- DESTRUCTOR ------------------------------- */
/* ************************************************************************** */

Character::~Character()
{
	for (int i = 0; i < 4; i++)
	{
		if (ivt[i])
			delete ivt[i];
	}
}

/* ************************************************************************** */
/* -------------------------------- OVERLOAD -------------------------------- */
/* ************************************************************************** */

Character& Character::operator=(const Character& obj)
{
	if (this == &obj)
		return (*this);
	for (int i = 0 ; i < 4 ; i++)
	{
		if (obj.ivt[i] != 0)
			delete ivt[i];
	}
	name = obj.name;
	for (int i = 0 ; i < 4 ; i++)
	{
		if (obj.ivt[i] != 0)
			ivt[i] = obj.ivt[i]->clone();
		else
			ivt[i] = NULL;
	}
	return (*this);
}



/* ************************************************************************** */
/* --------------------------------- GETTER --------------------------------- */
/* ************************************************************************** */

std::string const & Character::getName() const {
	return (name);
}

int Character::getIdx() const {
	return (_idx);
}
/* ************************************************************************** */
/* --------------------------------- SETTER --------------------------------- */
/* ************************************************************************** */

/* setter code */

/* ************************************************************************** */
/* ------------------------------- EXCEPTION -------------------------------- */
/* ************************************************************************** */

/* exception code */

/* ************************************************************************** */
/* ---------------------------- MEMBER FUNCTION ----------------------------- */
/* ************************************************************************** */

void
Character::equip(AMateria* m) {
	if (!m || _idx >= 3)
		return ;
	for (int i = 0; i < _idx; i++)
	{
		if (ivt[i] == m)
			return ;
	}
	ivt[_idx] = m;
	_idx++;
}

void
Character::unequip(int idx) {
	if (idx < 0 || _idx <= 0 || idx >= _idx)
		return ;
	for (int i = idx; i < _idx; i++)
		ivt[i] = ivt[i + 1];
	ivt[_idx] = 0;
	_idx--;
}

void
Character::use(int idx, ICharacter& target) {
	if (idx < 0 || _idx <= idx)
		return ;
	ivt[idx]->use(target);
}
