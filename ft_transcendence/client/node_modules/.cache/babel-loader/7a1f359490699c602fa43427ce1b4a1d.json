{"ast":null,"code":"class GameObject {\n  constructor(game, width, height, x, y) {\n    this.game = void 0;\n    this.width = void 0;\n    this.height = void 0;\n    this.x = void 0;\n    this.y = void 0;\n    this.game = game;\n    this.width = width;\n    this.height = height;\n    this.x = x;\n    this.y = y;\n  }\n\n  update(dt) {}\n\n  draw(ctx, dt) {\n    this.update(dt);\n    ctx.fillRect(this.x, this.y, this.width, this.height);\n  }\n\n  collision(box) {\n    let boxLeft = box.x;\n    let boxRight = boxLeft + box.width;\n    let boxTop = box.y;\n    let boxBottom = boxTop + box.height;\n    let oldBoxLeft = box.oldX;\n    let oldBoxRight = oldBoxLeft + box.width;\n    let oldBoxTop = box.oldY;\n    let oldBoxBottom = oldBoxTop + box.height;\n    let myLeft = this.x;\n    let myRight = myLeft + this.width;\n    let myTop = this.y;\n    let myBottom = myTop + this.height;\n\n    if (boxLeft < myRight && boxRight > myLeft && boxTop < myBottom && boxBottom > myTop) {\n      let left = oldBoxRight < myLeft && boxRight >= myLeft;\n      let right = oldBoxLeft >= myRight && boxLeft < myRight;\n      let top = oldBoxBottom < myTop && boxBottom >= myTop;\n      let bot = oldBoxTop >= myBottom && boxTop < myBottom;\n\n      if (top || bot) {\n        box.dirY *= -1;\n      }\n\n      if (right || left) {\n        box.dirX *= -1;\n      }\n\n      if (top || bot || right || left) box.onCollision();\n    }\n  }\n\n}\n\n;\nexport default GameObject;","map":{"version":3,"sources":["/Users/sohndohyun/works/transcendence/client/src/Pong/GameObject.tsx"],"names":["GameObject","constructor","game","width","height","x","y","update","dt","draw","ctx","fillRect","collision","box","boxLeft","boxRight","boxTop","boxBottom","oldBoxLeft","oldX","oldBoxRight","oldBoxTop","oldY","oldBoxBottom","myLeft","myRight","myTop","myBottom","left","right","top","bot","dirY","dirX","onCollision"],"mappings":"AAGA,MAAMA,UAAN,CAAiB;AAObC,EAAAA,WAAW,CAACC,IAAD,EAAaC,KAAb,EAA4BC,MAA5B,EAA4CC,CAA5C,EAAuDC,CAAvD,EAAkE;AAAA,SAN7EJ,IAM6E;AAAA,SAL7EC,KAK6E;AAAA,SAJ7EC,MAI6E;AAAA,SAH7EC,CAG6E;AAAA,SAF7EC,CAE6E;AACzE,SAAKJ,IAAL,GAAYA,IAAZ;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,CAAL,GAASA,CAAT;AACA,SAAKC,CAAL,GAASA,CAAT;AACH;;AAEDC,EAAAA,MAAM,CAACC,EAAD,EAAa,CAElB;;AAEDC,EAAAA,IAAI,CAACC,GAAD,EAAWF,EAAX,EAAuB;AACvB,SAAKD,MAAL,CAAYC,EAAZ;AACAE,IAAAA,GAAG,CAACC,QAAJ,CAAa,KAAKN,CAAlB,EAAqB,KAAKC,CAA1B,EAA6B,KAAKH,KAAlC,EAAyC,KAAKC,MAA9C;AACH;;AAEDQ,EAAAA,SAAS,CAACC,GAAD,EAAY;AACjB,QAAIC,OAAO,GAAGD,GAAG,CAACR,CAAlB;AACA,QAAIU,QAAQ,GAAGD,OAAO,GAAGD,GAAG,CAACV,KAA7B;AACA,QAAIa,MAAM,GAAGH,GAAG,CAACP,CAAjB;AACA,QAAIW,SAAS,GAAGD,MAAM,GAAGH,GAAG,CAACT,MAA7B;AAEA,QAAIc,UAAU,GAAGL,GAAG,CAACM,IAArB;AACA,QAAIC,WAAW,GAAGF,UAAU,GAAGL,GAAG,CAACV,KAAnC;AACA,QAAIkB,SAAS,GAAGR,GAAG,CAACS,IAApB;AACA,QAAIC,YAAY,GAAGF,SAAS,GAAGR,GAAG,CAACT,MAAnC;AAEA,QAAIoB,MAAM,GAAG,KAAKnB,CAAlB;AACA,QAAIoB,OAAO,GAAGD,MAAM,GAAG,KAAKrB,KAA5B;AACA,QAAIuB,KAAK,GAAG,KAAKpB,CAAjB;AACA,QAAIqB,QAAQ,GAAGD,KAAK,GAAG,KAAKtB,MAA5B;;AAEA,QAAIU,OAAO,GAAGW,OAAV,IAAqBV,QAAQ,GAAGS,MAAhC,IAA0CR,MAAM,GAAGW,QAAnD,IAA+DV,SAAS,GAAGS,KAA/E,EAAsF;AAClF,UAAIE,IAAI,GAAGR,WAAW,GAAGI,MAAd,IAAwBT,QAAQ,IAAIS,MAA/C;AACA,UAAIK,KAAK,GAAGX,UAAU,IAAIO,OAAd,IAAyBX,OAAO,GAAGW,OAA/C;AACA,UAAIK,GAAG,GAAGP,YAAY,GAAGG,KAAf,IAAwBT,SAAS,IAAIS,KAA/C;AACA,UAAIK,GAAG,GAAGV,SAAS,IAAIM,QAAb,IAAyBX,MAAM,GAAGW,QAA5C;;AAEA,UAAIG,GAAG,IAAIC,GAAX,EAAgB;AACZlB,QAAAA,GAAG,CAACmB,IAAJ,IAAY,CAAC,CAAb;AACH;;AACD,UAAIH,KAAK,IAAID,IAAb,EAAmB;AACff,QAAAA,GAAG,CAACoB,IAAJ,IAAY,CAAC,CAAb;AACH;;AACD,UAAIH,GAAG,IAAIC,GAAP,IAAcF,KAAd,IAAuBD,IAA3B,EACIf,GAAG,CAACqB,WAAJ;AACP;AACJ;;AAvDY;;AAwDhB;AAED,eAAelC,UAAf","sourcesContent":["import Game from './Game';\nimport Ball from './Ball';\n\nclass GameObject {\n    game: Game;\n    width: number;\n    height: number;\n    x: number;\n    y: number;\n\n    constructor(game: Game, width: number, height: number, x: number, y: number) {\n        this.game = game;\n        this.width = width;\n        this.height = height;\n        this.x = x;\n        this.y = y;\n    }\n\n    update(dt: number) {\n\n    }\n\n    draw(ctx: any, dt: number) {\n        this.update(dt);\n        ctx.fillRect(this.x, this.y, this.width, this.height);\n    }\n\n    collision(box: Ball) {\n        let boxLeft = box.x;\n        let boxRight = boxLeft + box.width;\n        let boxTop = box.y;\n        let boxBottom = boxTop + box.height;\n\n        let oldBoxLeft = box.oldX;\n        let oldBoxRight = oldBoxLeft + box.width;\n        let oldBoxTop = box.oldY;\n        let oldBoxBottom = oldBoxTop + box.height;\n\n        let myLeft = this.x;\n        let myRight = myLeft + this.width;\n        let myTop = this.y;\n        let myBottom = myTop + this.height;\n\n        if (boxLeft < myRight && boxRight > myLeft && boxTop < myBottom && boxBottom > myTop) {\n            let left = oldBoxRight < myLeft && boxRight >= myLeft;\n            let right = oldBoxLeft >= myRight && boxLeft < myRight;\n            let top = oldBoxBottom < myTop && boxBottom >= myTop;\n            let bot = oldBoxTop >= myBottom && boxTop < myBottom;\n\n            if (top || bot) {\n                box.dirY *= -1;\n            }\n            if (right || left) {\n                box.dirX *= -1;\n            }\n            if (top || bot || right || left)\n                box.onCollision();\n        }\n    }\n};\n\nexport default GameObject;"]},"metadata":{},"sourceType":"module"}